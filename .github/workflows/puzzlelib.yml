name: PuzzleLib
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  build_and_test_lib:
    name: Build & Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            generator: Xcode
            buildType: Release
            triplet: x64-osx

    env:
      BUILD_DIR: '${{ github.workspace }}/puzzlelib/build/'

    steps:
    - uses: actions/checkout@v2

    - name: Install CMake
      uses: lukka/get-cmake@latest

    # Restore from cache the previously built ports. If a "cache miss" occurs, then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on to install the packages when run-cmake runs, no packages are installed at this time and the input 'setupOnly:true' is mandatory.
    - name: Install vcpkg and restore artifacts
      uses: lukka/run-vcpkg@v7
      with:
        # Just install vcpkg for now, do not install any ports in this step yet.
        setupOnly: true
        # Location of the vcpkg submodule in the Git repository.
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
        # vcpkgTriplet: ${{ matrix.triplet }}
        # Because vcpkg is not used as a submodule, we need to specify the exact git commit id
        vcpkgGitCommitId: b67fab9861239e33b722b9a44f5c96dec6ca807e
        # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
        additionalCachedPaths: ${{ env.BUILD_DIR }}/vcpkg_installed

    - name: Build
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/puzzlelib/CMakeLists.txt'
        buildDirectory: ${{ env.BUILD_DIR }}
        useVcpkgToolchainFile: true
        buildWithCMake: true

    - name: Show directory content
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        echo "/"
        ls
        echo "test/"
        ls test
        echo "test/data/images/"
        ls -la test/data/images

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: ctest -T test --output-on-failure --verbose
